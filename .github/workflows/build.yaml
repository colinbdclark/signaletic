name: build-and-run

on: [push, pull_request]

jobs:
  build-libstar:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - uses: BSFishy/pip-action@v1
        with:
          packages: |
            meson
            ninja
      - uses: mymindstorm/setup-emsdk@v11

      - name: Prepare MSVC (Windows-only)
        if: runner.os == 'Windows'
        uses: bus1/cabuild/action/msdevshell@v1

      # Build libstar for the native architecture
      - name: Native build
        run: |
          cd libstar
          meson setup build/native
          meson compile -C build/native

      # Build libstar for wasm
      # TODO: Determine why Windows can't find emcc.
      - name: Web Assembly build
        if: runner.os != 'Windows'
        run: |
          cd libstar
          meson setup build/wasm --cross-file wasm-cross-compile.txt
          meson compile -C build/wasm

      # Tests
      - name: Run native unit tests
        run: |
          cd libstar
          meson test -C build/native -v

      - name: Run unit tests in Node.js
        if: runner.os != 'Windows'
        run: |
          cd libstar
          meson test -C build/wasm -v

      # Run examples
      - name: run console example
        run: ./libstar/build/native/libstar-console-example

      - name: run console example in Node.js
        if: runner.os != 'Windows'
        run: node ./libstar/build/wasm/libstar-console-example.js

  build-daisy-host:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install ARM build toolchain
        run: brew install gcc-arm-embedded

      - name: Build libDaisy dependency
        run: |
          cd hosts/daisy/vendor/libDaisy
          make
      - name: Build Bluemchen example
        run: |
          cd hosts/daisy/examples/bluemchen
          make
