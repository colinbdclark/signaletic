interface Signals {
    sig_dsp_Value Value_new(sig_Allocator allocator,
        sig_AudioSettings audioSettings);

    void Value_destroy(sig_Allocator allocator,
        sig_dsp_Value value);


    sig_dsp_BinaryOp_Inputs BinaryOp_Inputs_new(sig_Allocator allocator,
        any left, any right);

    void BinaryOp_Inputs_destroy(sig_Allocator allocator,
        sig_dsp_BinaryOp_Inputs inputs);

    sig_dsp_BinaryOp Mul_new(sig_Allocator allocator,
        sig_AudioSettings audioSettings,
        sig_dsp_BinaryOp_Inputs inputs);

    void Mul_destroy(sig_Allocator allocator, sig_dsp_BinaryOp mul);

    sig_dsp_BinaryOp Add_new(sig_Allocator allocator,
        sig_AudioSettings audioSettings,
        sig_dsp_BinaryOp_Inputs inputs);

    void Add_destroy(sig_Allocator allocator, sig_dsp_BinaryOp add);

    sig_dsp_BinaryOp Div_new(sig_Allocator allocator,
        sig_AudioSettings audioSettings,
        sig_dsp_BinaryOp_Inputs inputs);

    void Div_destroy(sig_Allocator allocator, sig_dsp_BinaryOp div);


    sig_dsp_Sine Sine_new(sig_Allocator allocator,
        sig_AudioSettings audioSettings,
        sig_dsp_Sine_Inputs inputs);

    void Sine_destroy(sig_Allocator allocator,
        sig_dsp_Sine sine);

    sig_dsp_Sine_Inputs Sine_Inputs_new(sig_Allocator allocator,
        any freq, any phaseOffset, any mul, any add);

    void Sine_Inputs_destroy(sig_Allocator allocator,
        sig_dsp_Sine_Inputs inputs);


    sig_dsp_ClockFreqDetector ClockFreqDetector_new(sig_Allocator allocator,
        sig_AudioSettings audioSettings,
        sig_dsp_ClockFreqDetector_Inputs inputs);

    void ClockFreqDetector_destroy(sig_Allocator allocator,
        sig_dsp_ClockFreqDetector detector);

    sig_dsp_ClockFreqDetector_Inputs ClockFreqDetector_Inputs_new(sig_Allocator allocator, any source);

    void ClockFreqDetector_Inputs_destroy(sig_Allocator allocator,
        sig_dsp_ClockFreqDetector_Inputs inputs);
};

interface Signaletic {
    readonly attribute float PI;
    readonly attribute float TWOPI;

    void Signaletic();

    [Value] attribute Signals dsp;

    float fminf(float a, float b);
    float fmaxf(float a, float b);
    float clamp(float value, float min, float max);
    float midiToFreq(float midiNum);
    void fillWithValue(any array, unsigned long length, float value);
    void fillWithSilence(any array, unsigned long length);
    float interpolate_linear(float idx, any table,
        unsigned long length);
    float interpolate_cubic(float idx, any table,
        unsigned long length);
    float filter_onepole(float current, float previous, float coeff);
    float waveform_sine(float phase);
    float waveform_square(float phase);
    float waveform_saw(float phase);
    float waveform_reverseSaw(float phase);
    float waveform_triangle(float phase);

    sig_Allocator TLSFAllocator_new(unsigned long size);
    void TLSFAllocator_destroy(sig_Allocator allocator);

    sig_AudioSettings AudioSettings_new(sig_Allocator allocator);
    void AudioSettings_destroy(sig_Allocator allocator,
        sig_AudioSettings settings);

    sig_Buffer Buffer_new(sig_Allocator allocator,
        unsigned long length);
    void Buffer_fill(sig_Buffer buffer, float value);
    void Buffer_fillWithSilence(sig_Buffer buffer);
    void Buffer_destroy(sig_Allocator allocator, sig_Buffer buffer);

    any AudioBlock_new(sig_Allocator allocator,
        sig_AudioSettings audioSettings);
    any AudioBlock_newWithValue(sig_Allocator allocator,
        sig_AudioSettings audioSettings, float value);
};

interface sig_AllocatorHeap {
    attribute unsigned long length;
    attribute any memory;
};

interface sig_AllocatorImpl {
    void init(sig_Allocator allocator);
    any malloc(sig_Allocator allocator, unsigned long size);
    void free(sig_Allocator allocator, any obj);
};

interface sig_Allocator {
    attribute sig_AllocatorImpl impl;
    attribute sig_AllocatorHeap heap;
};

interface sig_AudioSettings {
    attribute float sampleRate;
    attribute unsigned long numChannels;
    attribute unsigned long blockSize;
};

interface sig_Buffer {
    attribute unsigned long length;
    attribute any samples;
};

interface sig_dsp_Signal {
    attribute sig_AudioSettings audioSettings;
    attribute any output;
    void generate(any signal);
};


interface sig_dsp_Value {
    [Value] attribute sig_dsp_Signal signal;
    [Value] attribute sig_dsp_Value_Parameters parameters;
    attribute float lastSample;
};

interface sig_dsp_Value_Parameters {
    attribute float value;
};


interface sig_dsp_Sine {
    [Value] attribute sig_dsp_Signal signal;
    attribute sig_dsp_Sine_Inputs inputs;
    attribute float phaseAccumulator;
};

interface sig_dsp_Sine_Inputs {
    attribute any freq;
    attribute any phaseOffset;
    attribute any mul;
    attribute any add;
};


interface sig_dsp_BinaryOp {
    [Value] attribute sig_dsp_Signal signal;
    attribute sig_dsp_BinaryOp_Inputs inputs;
};

interface sig_dsp_BinaryOp_Inputs {
    attribute any left;
    attribute any right;
};


interface sig_dsp_ClockFreqDetector {
    [Value] attribute sig_dsp_Signal signal;
    attribute sig_dsp_ClockFreqDetector_Inputs inputs;
};

interface sig_dsp_ClockFreqDetector_Inputs {
    attribute any source;
};
